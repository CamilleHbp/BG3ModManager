<adonisControls:AdonisWindow
	x:Class="DivinityModManager.Views.MainWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:adonisControls="clr-namespace:AdonisUI.Controls;assembly=AdonisUI"
	xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
	xmlns:adonisUI="clr-namespace:AdonisUI;assembly=AdonisUI"
	xmlns:ag="clr-namespace:WpfAutoGrid;assembly=WpfAutoGrid"
	xmlns:controls="clr-namespace:DivinityModManager.Controls"
	xmlns:conv="clr-namespace:DivinityModManager.Converters"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:dapp="clr-namespace:DivinityModManager;assembly=DivinityModManagerCore"
	xmlns:data="clr-namespace:DivinityModManager.Models;assembly=DivinityModManagerCore"
	xmlns:dd="urn:gong-wpf-dragdrop"
	xmlns:dutil="clr-namespace:DivinityModManager.Util;assembly=DivinityModManagerCore"
	xmlns:ext="clr-namespace:DivinityModManager.Controls.Extensions"
	xmlns:local="clr-namespace:DivinityModManager.Views"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:reactiveui="http://reactiveui.net"
	xmlns:vm="clr-namespace:DivinityModManager.ViewModels"
	xmlns:xc="http://schemas.xceed.com/wpf/xaml/toolkit"
	x:Name="Main"
	Title="{Binding Title}"
	Width="1400"
	Height="800"
	TitleBarBackground="#4e38c9"
	TitleBarForeground="{DynamicResource {x:Static adonisUI:Brushes.AccentForegroundBrush}}"
	mc:Ignorable="d">
	<Window.Style>
		<Style BasedOn="{StaticResource {x:Type Window}}" TargetType="Window" />
	</Window.Style>
	<!--  d:DataContext="{d:DesignInstance IsDesignTimeCreatable=True, Type=local:MainWindowDebugData}"  -->
	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/DivinityModManager;component/Resources/Themes/MainResourceDictionary.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<DataTemplate x:Key="VerticalModLayout">
				<local:VerticalModLayout />
			</DataTemplate>
			<DataTemplate x:Key="HorizontalModLayout">
				<local:HorizontalModLayout ViewModel="{Binding}" />
			</DataTemplate>
			<Style x:Key="UpdateButtonStyle" TargetType="{x:Type Button}">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border Background="{TemplateBinding Background}">
								<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="LightGreen" />
					</Trigger>
				</Style.Triggers>
			</Style>
			<DataTemplate x:Key="UpdatesButtonTemplate">
				<StackPanel x:Name="UpdateViewPanel" VerticalAlignment="Stretch">
					<Button
						x:Name="UpdateViewToggleButton"
						MinWidth="20"
						Margin="0"
						Padding="0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						BorderThickness="0"
						Command="{Binding ToggleUpdatesViewCommand}"
						Style="{StaticResource UpdateButtonStyle}"
						ToolTip="Toggle the Mod Updates View">
						<Button.Content>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<TextBlock
									Padding="4,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Foreground="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}"
									Text="Updates:"
									TextAlignment="Center" />
								<!--<controls:CircleDecorator
									x:Name="RedUpdateBackground"
									Grid.Column="1"
									Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
									Height="16"
									BorderBrush="DarkGray"
									BorderThickness="1">
									<controls:CircleDecorator.Background>
										<LinearGradientBrush>
											<GradientStop Offset="0.0" Color="{DynamicResource {x:Static adonisUI:Colors.WindowButtonHighlightColor}}" />
											<GradientStop Offset="1.0" Color="{DynamicResource {x:Static adonisUI:Colors.WindowButtonInteractionColor}}" />
										</LinearGradientBrush>
									</controls:CircleDecorator.Background>
									<controls:CircleDecorator.ToolTip>
										<TextBlock>
											<Run Text="Total Pending Updates:" />
											<Run Text="{Binding ModUpdatesViewData.TotalUpdates}" /></TextBlock>
									</controls:CircleDecorator.ToolTip>
								</controls:CircleDecorator>-->
								<TextBlock
									x:Name="UpdateCountTextBlock"
									Grid.Column="1"
									Padding="4,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Foreground="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}"
									Text="{Binding ModUpdatesViewData.TotalUpdates, FallbackValue='0'}"
									TextAlignment="Center">
									<TextBlock.Effect>
										<DropShadowEffect
											BlurRadius="4"
											Direction="330"
											Opacity="0.5"
											ShadowDepth="1"
											Color="{DynamicResource {x:Static adonisUI:Colors.Layer3BackgroundColor}}" />
									</TextBlock.Effect>
								</TextBlock>
								<Image
									x:Name="ExpandImage"
									Grid.Column="3"
									RenderOptions.BitmapScalingMode="Fant"
									Source="{StaticResource ExpandDownImage}"
									Stretch="Uniform"
									StretchDirection="UpOnly"
									Visibility="{Binding ModUpdatesAvailable, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue='Hidden'}" />
							</Grid>
						</Button.Content>
					</Button>
				</StackPanel>
				<DataTemplate.Triggers>
					<DataTrigger Binding="{Binding ModUpdatesAvailable}" Value="True">
						<!--<Setter TargetName="RedUpdateBackground" Property="Background">
							<Setter.Value>
								<LinearGradientBrush>
									<GradientStop Offset="0.0" Color="IndianRed" />
									<GradientStop Offset="1.0" Color="Red" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter TargetName="RedUpdateBackground" Property="BorderBrush" Value="#FFEE3D3D" />-->
						<Setter TargetName="UpdateCountTextBlock" Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ErrorBrush}}" />
						<Setter TargetName="UpdateCountTextBlock" Property="FontWeight" Value="Bold" />
					</DataTrigger>
					<DataTrigger Binding="{Binding ModUpdatesAvailable}" Value="False">
						<!--<Setter TargetName="RedUpdateBackground" Property="BorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}" />
						<Setter TargetName="RedUpdateBackground" Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BackgroundBrush}}" />-->
						<Setter TargetName="UpdateCountTextBlock" Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.DisabledForegroundBrush}}" />
						<Setter TargetName="UpdateCountTextBlock" Property="FontWeight" Value="Normal" />
					</DataTrigger>
					<DataTrigger Binding="{Binding ModUpdatesViewVisible}" Value="True">
						<Setter TargetName="UpdateViewPanel" Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
					</DataTrigger>
					<DataTrigger Binding="{Binding ModUpdatesViewVisible}" Value="False">
						<Setter TargetName="UpdateViewPanel" Property="Background" Value="Transparent" />
					</DataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ModUpdatesViewVisible}" Value="False" />
							<Condition Binding="{Binding ModUpdatesAvailable}" Value="True" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter TargetName="ExpandImage" Property="Source" Value="{StaticResource ExpandDownImage}" />
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ModUpdatesViewVisible}" Value="True" />
							<Condition Binding="{Binding ModUpdatesAvailable}" Value="True" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter TargetName="ExpandImage" Property="Source" Value="{StaticResource ExpandUpImage}" />
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ModUpdatesViewVisible}" Value="False" />
							<Condition Binding="{Binding ModUpdatesAvailable}" Value="False" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter TargetName="ExpandImage" Property="Source" Value="{StaticResource ExpandDownImageDisabled}" />
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>
			<local:ModUpdatesLayout x:Key="ModUpdaterPanel" Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}" />
			<Grid x:Key="ModOrderPanel">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>
				<Grid Margin="4">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Grid.Resources>
						<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
							<Setter Property="VerticalAlignment" Value="Center" />
							<Setter Property="Margin" Value="2,0,2,0" />
						</Style>
						<Style BasedOn="{StaticResource VerticalSeparator}" TargetType="Rectangle">
							<Setter Property="Margin" Value="8,0,6,0" />
						</Style>
						<Style BasedOn="{StaticResource IconButtonStyle}" TargetType="{x:Type Button}">
							<Setter Property="Tag" Value="{Binding}" />
						</Style>
						<Style BasedOn="{StaticResource {x:Type ContextMenu}}" TargetType="{x:Type ContextMenu}">
							<Setter Property="DataContext" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}" />
						</Style>
					</Grid.Resources>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock
							Margin="0,0,4,0"
							VerticalAlignment="Center"
							Text="Profile" />
						<ComboBox
							x:Name="ProfilesComboBox"
							Grid.Column="1"
							MinWidth="125"
							MinHeight="16"
							MaxWidth="250"
							DisplayMemberPath="Name"
							IsEditable="False"
							IsTextSearchEnabled="False"
							ItemsSource="{Binding Profiles}"
							SelectedIndex="{Binding SelectedProfileIndex}"
							Tag="{Binding}">
							<ComboBox.ContextMenu>
								<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
									<MenuItem
										Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
										CommandParameter="{Binding SelectedProfile.Folder}"
										Header="Open Profile Folder in File Explorer..." />
									<MenuItem
										Command="{Binding CopyPathToClipboardCommand}"
										CommandParameter="{Binding SelectedProfile.Folder}"
										Header="Copy Profile Path to Clipboard" />
								</ContextMenu>
							</ComboBox.ContextMenu>
						</ComboBox>
					</Grid>
					<Grid Grid.Column="1" Margin="4,0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock
							Margin="0,0,4,0"
							VerticalAlignment="Center"
							Text="Mod Order" />
						<ComboBox
							x:Name="OrdersComboBox"
							Grid.Column="1"
							MinWidth="140"
							MinHeight="16"
							MaxWidth="250"
							DisplayMemberPath="Name"
							IsEditable="{Binding IsRenamingOrder, FallbackValue=False}"
							IsTextSearchEnabled="False"
							ItemsSource="{Binding ModOrderList}"
							KeyDown="ComboBox_KeyDown_LoseFocus"
							Loaded="OrdersComboBox_Loaded"
							LostFocus="OrdersComboBox_LostFocus"
							SelectedIndex="{Binding SelectedModOrderIndex}"
							Tag="{Binding}"
							Text="{Binding SelectedModOrder.Name, Mode=TwoWay}">
							<ComboBox.ItemContainerStyle>
								<Style TargetType="ComboBoxItem">
									<EventSetter Event="ComboBoxItem.PreviewMouseDown" Handler="OrderComboBox_OnUserClick" />
								</Style>
							</ComboBox.ItemContainerStyle>
							<ComboBox.ContextMenu>
								<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
									<MenuItem
										Command="{Binding ToggleOrderRenamingCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget}"
										Header="Toggle Renaming" />
									<MenuItem
										Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
										CommandParameter="{Binding SelectedModOrder.FilePath}"
										Header="Open in File Explorer..." />
									<MenuItem
										Command="{Binding CopyPathToClipboardCommand}"
										CommandParameter="{Binding SelectedModOrder.FilePath}"
										Header="Copy Path to Clipboard" />
									<MenuItem
										Command="{Binding DeleteOrderCommand}"
										CommandParameter="{Binding SelectedModOrder}"
										Header="Delete Order" />
								</ContextMenu>
							</ComboBox.ContextMenu>
						</ComboBox>
					</Grid>
					<Grid Grid.Column="2" Margin="1,0,0,0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<StackPanel Orientation="Horizontal">
							<Button
								x:Name="SaveButton"
								Command="{Binding SaveOrderCommand}"
								ToolTip="Save Load Order to File">
								<Button.Resources>
									<Style BasedOn="{StaticResource {x:Type controls:AutoGrayableImage}}" TargetType="{x:Type controls:AutoGrayableImage}">
										<Style.Triggers>
											<Trigger Property="IsEnabled" Value="True">
												<Setter Property="Source" Value="{StaticResource SaveImage}" />
											</Trigger>
											<Trigger Property="IsEnabled" Value="False">
												<Setter Property="Source" Value="{StaticResource SaveDisabledImage}" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</Button.Resources>
								<controls:AutoGrayableImage />
							</Button>
							<Button
								x:Name="SaveAsButton"
								Command="{Binding SaveOrderAsCommand}"
								ToolTip="Save Order As...">
								<controls:AutoGrayableImage Source="{StaticResource SaveAsImage}" />
							</Button>
							<Button
								x:Name="AddNewOrderButton"
								Command="{Binding AddOrderConfigCommand}"
								ToolTip="Add New Load Order">
								<controls:AutoGrayableImage Source="{StaticResource AddItemImage}" />
							</Button>
						</StackPanel>
						<Rectangle
							Grid.Column="1"
							Margin="8,0,6,0"
							Style="{StaticResource VerticalSeparator}" />
						<StackPanel Grid.Column="2" Orientation="Horizontal">
							<StackPanel.Resources />
							<TextBlock Text="Export" />
							<Button
								x:Name="ExportToModSettingsButton"
								Command="{Binding ExportOrderCommand}"
								ToolTip="Export Order to Game">
								<controls:AutoGrayableImage Source="{StaticResource ExportScriptImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding Path=OpenFileCommand, Source={x:Static dapp:DivinityApp.Commands}}"
											CommandParameter="{Binding SelectedProfile.ModSettingsFile}"
											Header="Open Exported Mod Order File..." />
										<MenuItem
											Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
											CommandParameter="{Binding SelectedProfile.ModSettingsFile}"
											Header="Open in File Explorer..." />
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding SelectedProfile.ModSettingsFile}"
											Header="Copy Path to Clipboard" />
										<MenuItem Command="{Binding CopyOrderToClipboardCommand}" Header="Copy Order to Clipboard" />
										<MenuItem Command="{Binding ExportOrderAsListCommand}" Header="Export Order As List..." />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<Button
								x:Name="ExportOrderToArchiveButton"
								Command="{Binding ExportLoadOrderAsArchiveCommand}"
								ToolTip="Export Active Mods to Zip">
								<controls:AutoGrayableImage Source="{StaticResource ZipFileImage}" />
							</Button>
							<Button
								x:Name="ExportOrderToArchiveAsButton"
								Command="{Binding ExportLoadOrderAsArchiveToFileCommand}"
								ToolTip="Export Active Mods to Zip As...">
								<controls:AutoGrayableImage Source="{StaticResource ZipFileAsImage}" />
							</Button>
							<Rectangle />
							<StackPanel Orientation="Horizontal">
								<TextBlock Text="Campaign" />
								<ComboBox
									x:Name="AdventureModComboBox"
									Grid.Column="1"
									MinWidth="100"
									MinHeight="16"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									DisplayMemberPath="Name"
									IsTextSearchEnabled="False"
									ItemsSource="{Binding AdventureMods}"
									SelectedIndex="{Binding SelectedAdventureModIndex}"
									Tag="{Binding}">
									<ComboBox.ToolTip>
										<ToolTip DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag.SelectedAdventureMod}">
											<ToolTip.Style>
												<Style BasedOn="{StaticResource {x:Type ToolTip}}" TargetType="ToolTip">
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="ToolTip">
																<Border
																	Padding="8"
																	Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}"
																	BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
																	BorderThickness="2">
																	<ContentPresenter />
																</Border>
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</ToolTip.Style>
											<StackPanel
												x:Name="DescTooltipStackPanel"
												MaxWidth="700"
												Background="Transparent"
												Orientation="Vertical">
												<StackPanel.Resources>
													<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
														<Setter Property="TextWrapping" Value="Wrap" />
														<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
														<!--<Setter Property="FontFamily" Value="Arial" />-->
													</Style>
													<Style BasedOn="{StaticResource {x:Type ListBox}}" TargetType="ListBox" />
												</StackPanel.Resources>
												<StackPanel Orientation="Horizontal">
													<TextBlock
														Margin="2"
														FontSize="16"
														FontWeight="Bold"
														Foreground="{DynamicResource {x:Static adonisUI:Brushes.AlertBrush}}"
														Text="{Binding Name}">
														<TextBlock.Effect>
															<DropShadowEffect
																BlurRadius="4"
																Direction="330"
																Opacity="0.5"
																ShadowDepth="4"
																Color="{DynamicResource {x:Static adonisUI:Colors.Layer3BackgroundColor}}" />
														</TextBlock.Effect>
													</TextBlock>
													<TextBlock
														Margin="2"
														Foreground="Red"
														Text=" (Classic)"
														Visibility="{Binding IsClassicMod, Converter={StaticResource BoolToVisibilityConverter}}" />
													<TextBlock
														Margin="2"
														Foreground="Lime"
														Text=" (Definitive Edition)"
														Visibility="{Binding IsClassicMod, Converter={StaticResource BoolToVisibilityConverterReversed}}" />
												</StackPanel>
												<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
												<!--<html:HtmlPanel
							Background="{DynamicResource {x:Static adonisUI:Brushes.Layer3BackgroundBrush}}"
							Text="{Binding Description}"
							Visibility="{Binding HasDescription, Converter={StaticResource BoolToVisibilityConverter}}" />-->
												<TextBlock Margin="2" TextWrapping="Wrap"><Run Text="Created by " /><Run
														FontWeight="Bold"
														Foreground="#3da2fa"
														Text="{Binding Author}" />
													<TextBlock.Effect>
														<DropShadowEffect
															BlurRadius="4"
															Direction="330"
															Opacity="0.5"
															ShadowDepth="4"
															Color="{DynamicResource {x:Static adonisUI:Colors.Layer3BackgroundColor}}" />
													</TextBlock.Effect>
												</TextBlock>
												<TextBlock
													Margin="2"
													Text="{Binding Description}"
													TextWrapping="Wrap"
													Visibility="{Binding HasDescription, Converter={StaticResource BoolToVisibilityConverter}}" />
												<StackPanel
													Margin="2"
													Orientation="Vertical"
													Visibility="{Binding HasDependencies, Converter={StaticResource BoolToVisibilityConverter}}">
													<TextBlock FontWeight="Bold" Text="Dependencies:" />
													<ListBox
														Margin="2"
														Padding="0"
														BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
														BorderThickness="1"
														ItemsSource="{Binding Dependencies}" />
												</StackPanel>
												<StackPanel Margin="2" Orientation="Horizontal">
													<TextBlock
														Margin="2,2,0,2"
														FontSize="12"
														FontWeight="Bold"
														Foreground="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}"
														Text="{Binding Type}" />
													<Rectangle Fill="{DynamicResource {x:Static adonisUI:Brushes.AccentHighlightBrush}}" Style="{StaticResource VerticalSeparator}" />
													<TextBlock
														Margin="0,2,2,2"
														FontWeight="Bold"
														Text="{Binding Targets}" />
												</StackPanel>
												<StackPanel Orientation="Vertical">
													<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
													<TextBlock
														Margin="2"
														Text="{Binding FileName}"
														Visibility="{Binding IsEditorMod, Converter={StaticResource BoolToVisibilityConverterReversed}, FallbackValue=Collapsed}" />
													<TextBlock Margin="2" Visibility="{Binding HasOsirisExtenderSettings, Converter={StaticResource BoolToVisibilityConverter}}">
														<Run Foreground="Goldenrod" Text="Script Extender " /><Run Foreground="Lime" Text="v" /><Run Foreground="Lime" Text="{Binding OsiExtenderData.RequiredExtensionVersion}" /></TextBlock>
												</StackPanel>
											</StackPanel>
										</ToolTip>
									</ComboBox.ToolTip>
									<ComboBox.ContextMenu>
										<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
											<MenuItem
												Command="{Binding OpenAdventureModInFileExplorerCommand}"
												CommandParameter="{Binding SelectedAdventureMod.FilePath}"
												Header="Open Mod in File Explorer..." />
											<MenuItem
												Command="{Binding CopyAdventureModPathToClipboardCommand}"
												CommandParameter="{Binding SelectedAdventureMod.FilePath}"
												Header="Copy Mod Path to Clipboard" />
										</ContextMenu>
									</ComboBox.ContextMenu>
								</ComboBox>
							</StackPanel>
							<Rectangle />
							<TextBlock Text="Refresh" />
							<Button
								x:Name="RefreshButton"
								Command="{Binding RefreshCommand}"
								ToolTip="Refresh Mods and Workshop Updates">
								<controls:AutoGrayableImage Source="{StaticResource RefreshImage}" />
							</Button>
							<Rectangle />
							<TextBlock Text="Shortcuts" />
							<Button
								x:Name="OpenModsFolderButton"
								Command="{Binding OpenModsFolderCommand}"
								ToolTip="Open Mods Folder">
								<controls:AutoGrayableImage Source="{StaticResource OpenFolderImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding PathwayData.DocumentsModsPath}"
											Header="Copy Path to Clipboard" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<Button
								x:Name="OpenWorkshopFolderButton"
								Command="{Binding OpenWorkshopFolderCommand}"
								ToolTip="Open Workshop Folder">
								<controls:AutoGrayableImage Source="{StaticResource OpenSteamWorkshopFolderImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding Settings.WorkshopPath}"
											Header="Copy Path to Clipboard" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<Button
								x:Name="OpenExtenderLogsFolderButton"
								Command="{Binding OpenExtenderLogDirectoryCommand}"
								ToolTip="Open Logs Folder">
								<controls:AutoGrayableImage
									Width="16"
									Height="16"
									Source="{StaticResource LogImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding Settings.ExtenderLogDirectory}"
											Header="Copy Path to Clipboard" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<Button
								x:Name="OpenGameButton"
								Command="{Binding OpenGameCommand}"
								ToolTip="Launch Game">
								<controls:AutoGrayableImage Source="{StaticResource OpenGameImage}" />
								<Button.ContextMenu>
									<ContextMenu>
										<MenuItem
											Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
											CommandParameter="{Binding Settings.GameExecutablePath}"
											Header="Open Game Folder..." />
										<MenuItem
											Command="{Binding CopyPathToClipboardCommand}"
											CommandParameter="{Binding Settings.GameExecutablePath}"
											Header="Copy Path to Clipboard" />
									</ContextMenu>
								</Button.ContextMenu>
							</Button>
							<ComboBox
								x:Name="GameLaunchActionComboBox"
								DisplayMemberPath="Description"
								ItemsSource="{Binding Source={ext:EnumExtension {x:Type dapp:DivinityGameLaunchWindowAction}}}"
								SelectedValue="{Binding ActionOnGameLaunch, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								SelectedValuePath="Value"
								ToolTip="When the game launches through the mod manager, this action will be performed" />
							<Rectangle />
							<TextBlock Text="Support" />
							<Button
								x:Name="OpenDonationPageButton"
								Command="{Binding OpenDonationPageCommand}"
								ToolTip="Donate a Coffee to the Developer (LaughingLeader)">
								<controls:AutoGrayableImage Source="{StaticResource OpenDonationLinkImage}" />
							</Button>
							<Button
								x:Name="OpenRepoPageButton"
								Command="{Binding OpenRepoPageCommand}"
								ToolTip="Open Project Page (Github)">
								<controls:AutoGrayableImage Source="{StaticResource OpenRepoLinkImage}" />
							</Button>
						</StackPanel>
					</Grid>
					<Grid Grid.Column="3" />
				</Grid>
				<Separator
					Grid.Row="1"
					Height="1"
					Background="{DynamicResource {x:Static adonisUI:Brushes.Layer3BorderBrush}}" />
				<ContentControl
					x:Name="LayoutContent"
					Grid.Row="2"
					Content="{Binding}">
					<ContentControl.Style>
						<Style TargetType="{x:Type ContentControl}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding LayoutMode}" Value="0">
									<Setter Property="ContentTemplate" Value="{StaticResource HorizontalModLayout}" />
								</DataTrigger>
								<DataTrigger Binding="{Binding LayoutMode}" Value="1">
									<Setter Property="ContentTemplate" Value="{StaticResource VerticalModLayout}" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</ContentControl.Style>
				</ContentControl>
			</Grid>
			<Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}" />
			<Style TargetType="{x:Type xc:MessageBox}">
				<Setter Property="Width" Value="600" />
				<Setter Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer0BackgroundBrush}}" />
				<Setter Property="ButtonRegionBackground" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer0BackgroundBrush}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}" />
				<Setter Property="CaptionForeground" Value="{DynamicResource {x:Static adonisUI:Brushes.AccentForegroundBrush}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
				<Setter Property="WindowBackground" Value="#4e38c9" />
				<Setter Property="WindowBorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}" />
				<Setter Property="CloseButtonStyle">
					<Setter.Value>
						<Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
							<Setter Property="IsEnabled" Value="False" />
							<Setter Property="Opacity" Value="0" />
						</Style>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Window.Resources>
	<Window.InputBindings>
		<KeyBinding
			Key="S"
			Command="{Binding SaveOrderCommand}"
			Modifiers="Ctrl" />
		<KeyBinding
			Key="S"
			Command="{Binding SaveOrderAsCommand}"
			Modifiers="Ctrl+Alt" />
		<KeyBinding
			Key="E"
			Command="{Binding ExportOrderCommand}"
			Modifiers="Ctrl+Shift" />
		<KeyBinding
			Key="N"
			Command="{Binding AddOrderConfigCommand}"
			Modifiers="Ctrl" />
		<KeyBinding
			Key="P"
			Command="{Binding OpenPreferencesCommand}"
			Modifiers="Ctrl" />
		<KeyBinding Key="F5" Command="{Binding RefreshCommand}" />
		<KeyBinding Key="F1" Command="{Binding OpenAboutWindowCommand}" />
	</Window.InputBindings>
	<Window.TaskbarItemInfo>
		<TaskbarItemInfo />
	</Window.TaskbarItemInfo>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<xc:WindowContainer
			Grid.Row="0"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Panel.ZIndex="99">
			<xc:MessageBox x:Name="MainWindowMessageBox_OK" Template="{StaticResource MessageBoxSelectableText}" />
		</xc:WindowContainer>
		<xc:BusyIndicator
			x:Name="MainBusyIndicator"
			BusyContent="{Binding}"
			IsBusy="{Binding MainProgressIsActive, Mode=OneWay}"
			Style="{StaticResource BusyIndicatorProgressStyle}">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>
				<Rectangle
					Grid.RowSpan="3"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Stretch"
					Panel.ZIndex="99"
					Fill="{DynamicResource {x:Static adonisUI:Brushes.Layer3BackgroundBrush}}"
					Visibility="{Binding MainProgressIsActive, Converter={StaticResource BoolToVisibilityConverter}}" />
				<Grid Background="{DynamicResource {x:Static adonisUI:Brushes.Layer3BackgroundBrush}}">
					<Grid.Resources>
						<!--<Color x:Key="WhiteColor">White</Color>
						<Color x:Key="GoldColor">Gold</Color>-->
						<Style
							x:Key="MenuItemHightlightBlink"
							BasedOn="{StaticResource {x:Type MenuItem}}"
							TargetType="{x:Type MenuItem}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding HighlightExtenderDownload}" Value="True">
									<Setter Property="Foreground" Value="Gold" />
									<DataTrigger.EnterActions>
										<BeginStoryboard Name="BlinkyMenuItemStoryboard">
											<Storyboard
												AutoReverse="True"
												BeginTime="00:00:00"
												FillBehavior="Stop"
												RepeatBehavior="Forever"
												Duration="0:0:0.5">
												<!--<ColorAnimation
													Storyboard.TargetProperty="Foreground.Color"
													From="{StaticResource WhiteColor}"
													To="{StaticResource GoldColor}" />-->
												<DoubleAnimation
													Storyboard.TargetProperty="Opacity"
													From="1.0"
													To="0.5" />
											</Storyboard>
										</BeginStoryboard>
									</DataTrigger.EnterActions>
									<DataTrigger.ExitActions>
										<StopStoryboard BeginStoryboardName="BlinkyMenuItemStoryboard" />
									</DataTrigger.ExitActions>
								</DataTrigger>
								<DataTrigger Binding="{Binding HighlightExtenderDownload}" Value="False">
									<Setter Property="Opacity" Value="1.0" />
									<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</Grid.Resources>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="1" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>
					<Menu x:Name="TopMenuBar" Padding="2">
						<MenuItem Header="File">
							<MenuItem
								x:Name="FileAddNewOrderMenuItem"
								Header="Add New Order"
								InputGestureText="CTRL+N" />
							<Separator />
							<MenuItem
								x:Name="FileSaveOrderMenuItem"
								Header="Save Order"
								InputGestureText="CTRL+S" />
							<MenuItem
								x:Name="FileSaveOrderAsMenuItem"
								Header="Save Order As..."
								InputGestureText="CTRL+Alt+S" />
							<Separator />
							<MenuItem
								x:Name="FileImportOrderFromSave"
								Header="Import Order from Save..."
								InputGestureText="CTRL+O" />
							<MenuItem x:Name="FileImportOrderFromSaveAsNew" Header="Import Save as New Order..." />
							<MenuItem
								x:Name="FileImportOrderFromFile"
								Header="Import Order from File..."
								InputGestureText="CTRL+Shift+O" />
							<MenuItem x:Name="FileImportOrderZip" Header="Import Mod Order Zip..." />
							<Separator />
							<MenuItem
								x:Name="FileExportOrderToGameMenuItem"
								Header="Export Order to Game"
								InputGestureText="CTRL+Shift+E" />
							<Separator />
							<MenuItem x:Name="FileExportOrderToArchiveMenuItem" Header="Export Active Mods to Archive (.zip)" />
							<MenuItem x:Name="FileExportOrderToArchiveAsMenuItem" Header="Export Active Mods to Archive As..." />
							<MenuItem x:Name="FileExportOrderToTextListMenuItem" Header="Export Active Mods to Text File..." />
							<Separator />
							<MenuItem
								x:Name="FileRefreshMenuItem"
								Header="Reload All"
								InputGestureText="F5" />
						</MenuItem>
						<MenuItem Header="Edit">
							<MenuItem x:Name="EditToggleFileNameDisplayMenuItem" Header="Toggle Display Names / File Names" />
						</MenuItem>
						<MenuItem Header="Settings">
							<MenuItem
								x:Name="SettingsPreferencesMenuItem"
								Header="Preferences..."
								InputGestureText="CTRL+P" />
							<MenuItem
								x:Name="SettingsDarkModeMenuItem"
								Command="{Binding ToggleDarkModeCommand}"
								Header="Toggle Dark/Light Mode" />
						</MenuItem>
						<MenuItem Header="Tools" Style="{StaticResource MenuItemHightlightBlink}">
							<MenuItem
								x:Name="ToolsInstallOsiExtenderMenuItem"
								Command="{Binding DownloadAndInstallOsiExtenderCommand}"
								Header="Download &amp; Install the Script Extender..."
								Style="{StaticResource MenuItemHightlightBlink}" />
							<MenuItem
								x:Name="ToolsExtractSelectedModsMenuItem"
								Command="{Binding ExtractSelectedModsCommand}"
								Header="Extract Selected Mods To..." />
							<!--  Disabled for now  -->
							<MenuItem
								x:Name="ToolsRenameSaveMenuItem"
								Header="Rename Save..."
								Visibility="Collapsed" />
						</MenuItem>
						<MenuItem Header="Help">
							<MenuItem x:Name="HelpCheckForUpdateMenuItem" Header="Check for Updates" />
							<Separator />
							<MenuItem x:Name="HelpDonationMenuItem" Header="Donate a Coffee..." />
							<MenuItem x:Name="HelpOpenRepoPageMenuItem" Header="Open Repostory Page..." />
							<MenuItem
								x:Name="HelpOpenAboutWindowMenuItem"
								Header="About Divinity Mod Manager"
								InputGestureText="F1" />
						</MenuItem>
					</Menu>
					<StackPanel
						Grid.Column="3"
						Margin="2"
						Orientation="Horizontal" />
					<StackPanel
						Grid.Column="2"
						HorizontalAlignment="Left"
						VerticalAlignment="Center"
						Orientation="Horizontal">
						<ContentControl
							HorizontalAlignment="Left"
							VerticalAlignment="Center"
							Content="{Binding}"
							ContentTemplate="{StaticResource UpdatesButtonTemplate}"
							IsEnabled="{Binding ModUpdatesAvailable, Mode=OneWay, FallbackValue=false}" />
					</StackPanel>
				</Grid>
				<Separator
					Grid.Row="1"
					Height="1"
					Background="LightGray"
					BorderThickness="0" />
				<ContentPresenter
					x:Name="MainContentPresenter"
					Grid.Row="2"
					Content="{Binding}">
					<ContentPresenter.ContentTemplate>
						<DataTemplate>
							<ContentControl x:Name="MainContentControl" Content="{StaticResource ModOrderPanel}" />
							<DataTemplate.Triggers>
								<DataTrigger Binding="{Binding ModUpdatesViewVisible}" Value="True">
									<Setter TargetName="MainContentControl" Property="Content" Value="{StaticResource ModUpdaterPanel}" />
								</DataTrigger>
							</DataTemplate.Triggers>
						</DataTemplate>
					</ContentPresenter.ContentTemplate>
				</ContentPresenter>
			</Grid>
		</xc:BusyIndicator>
		<StatusBar Grid.Row="1" MinHeight="16">
			<StatusBarItem HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
				<StackPanel Orientation="Horizontal">
					<controls:BusyIndicator
						Width="16"
						Height="16"
						Margin="2"
						Visibility="{Binding StatusBarBusyIndicatorVisibility, FallbackValue=Collapsed}" />
					<TextBlock
						x:Name="StatusBarLoadingOperationTextBlock"
						VerticalAlignment="Center"
						Text="{Binding StatusBarRightText}" />
				</StackPanel>
			</StatusBarItem>
			<StatusBarItem HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
				<controls:AlertBar x:Name="AlertBar" Theme="Standard" />
			</StatusBarItem>
		</StatusBar>
	</Grid>
</adonisControls:AdonisWindow>
